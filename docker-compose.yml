# Sistema de Inventario y Ventas - Docker Compose
version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: inventario_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: inventario_ropa
      POSTGRES_USER: usuario
      POSTGRES_PASSWORD: contrase침a
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=es_CO.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - inventario_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U usuario -d inventario_ropa"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: inventario_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - inventario_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: inventario_backend
    restart: unless-stopped
    environment:
      # Base de datos
      DATABASE_URL: postgresql://usuario:contrase침a@postgres:5432/inventario_ropa
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # API Configuration
      API_HOST: 0.0.0.0
      API_PORT: 8000
      API_SECRET_KEY: ${API_SECRET_KEY:-tu-clave-secreta-cambiar-en-produccion}
      
      # Application
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      TIMEZONE: America/Bogota
      
      # CORS
      ALLOWED_ORIGINS: '["http://localhost:3000", "http://frontend:3000"]'
      
      # Cache settings
      CACHE_DEFAULT_TTL: 300
      CACHE_SCAN_TTL: 300
      CACHE_SEARCH_TTL: 180
      
      # Business rules
      DEFAULT_RESERVATION_MINUTES: 30
      AUTO_CLEANUP_EXPIRED_RESERVATIONS: true
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
      - ./backups:/app/backups
    ports:
      - "8000:8000"
    networks:
      - inventario_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: inventario_frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:8000/api
      REACT_APP_VERSION: 1.0.0
      REACT_APP_ENABLE_DEBUG: ${DEBUG:-false}
      GENERATE_SOURCEMAP: false
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "3000:80"
    networks:
      - inventario_network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (opcional para producci칩n)
  nginx:
    image: nginx:alpine
    container_name: inventario_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - inventario_network
    depends_on:
      - backend
      - frontend
    profiles:
      - production

  # Backup service
  backup:
    image: postgres:15-alpine
    container_name: inventario_backup
    restart: "no"
    environment:
      PGPASSWORD: contrase침a
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - inventario_network
    depends_on:
      - postgres
    command: /backup.sh
    profiles:
      - backup

  # Monitoring con Prometheus (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: inventario_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - inventario_network
    profiles:
      - monitoring

  # Grafana para dashboards (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: inventario_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - inventario_network
    depends_on:
      - prometheus
    profiles:
      - monitoring

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  inventario_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16